{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ludmi\\\\IdeaProjects\\\\Mesenger\\\\src\\\\main\\\\resources\\\\static\\\\src\\\\Chat.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { Client } from \"@stomp/stompjs\";\nimport SockJS from \"sockjs-client\";\nimport { jwtDecode } from \"jwt-decode\";\nimport \"./Chat.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Chat() {\n  _s();\n  const [message, setMessage] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n  const [recipientId, setRecipientId] = useState(\"\");\n  const [myId, setMyId] = useState(null);\n  const [connected, setConnected] = useState(false);\n  const clientRef = useRef(null);\n  const recipientIdRef = useRef(\"\");\n  const getToken = () => {\n    const match = document.cookie.match(new RegExp(\"(^| )token=([^;]+)\"));\n    return match ? match[2] : null;\n  };\n  const fetchMessages = async recipientIdToFetch => {\n    try {\n      const token = getToken();\n      const res = await fetch(`/messages/${myId}/${recipientIdToFetch}`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      if (res.ok) {\n        const data = await res.json();\n        setMessages(data.map(msg => ({\n          sender: msg.senderId === myId ? \"Я\" : msg.senderName || \"Он\",\n          text: msg.content,\n          timestamp: new Date(msg.timestamp).toLocaleString()\n        })));\n      } else {\n        console.error(\"Ошибка загрузки сообщений:\", res.status);\n      }\n    } catch (err) {\n      console.error(\"Ошибка при загрузке сообщений:\", err);\n    }\n  };\n  useEffect(() => {\n    if (recipientId && myId) {\n      fetchMessages(recipientId);\n    }\n  }, [recipientId, myId]);\n  useEffect(() => {\n    const token = getToken();\n    if (!token) {\n      alert(\"❌ Нет токена. Пожалуйста, войдите снова.\");\n      window.location.href = \"/\";\n      return;\n    }\n    const decoded = jwtDecode(token);\n    const id = decoded.userId;\n    if (!id) {\n      alert(\"⚠️ Токен не содержит userId.\");\n      return;\n    }\n    setMyId(id);\n    const socket = new SockJS(\"http://localhost:8080/ws\");\n    const client = new Client({\n      webSocketFactory: () => socket,\n      connectHeaders: {\n        Authorization: `Bearer ${token}`\n      },\n      reconnectDelay: 5000,\n      onConnect: () => {\n        setConnected(true);\n        client.subscribe(\"/user/queue/messages\", msg => {\n          const body = JSON.parse(msg.body);\n          const otherUser = body.senderId === id ? body.recipientId : body.senderId;\n          if (!recipientIdRef.current) {\n            recipientIdRef.current = otherUser;\n            setRecipientId(otherUser);\n          }\n          const isCurrentChat = body.senderId === recipientIdRef.current && body.recipientId === id || body.senderId === id && body.recipientId === recipientIdRef.current;\n          if (isCurrentChat) {\n            fetchMessages(recipientIdRef.current);\n          } else {\n            // Переключение на нового собеседника\n            recipientIdRef.current = otherUser;\n            setRecipientId(otherUser);\n            fetchMessages(otherUser);\n          }\n        });\n      },\n      onStompError: frame => {\n        console.error(\"STOMP ошибка: \", frame);\n      }\n    });\n    client.activate();\n    clientRef.current = client;\n    return () => {\n      client.deactivate();\n      setConnected(false);\n    };\n  }, []);\n  const handleSend = e => {\n    e.preventDefault();\n    const client = clientRef.current;\n    if (!message.trim() || !recipientId.trim()) return;\n    if (!client || !client.connected) {\n      alert(\"⛔ Подключение ещё не установлено.\");\n      return;\n    }\n    const payload = {\n      senderId: myId,\n      recipientId,\n      content: message\n    };\n    client.publish({\n      destination: \"/app/chat\",\n      body: JSON.stringify(payload)\n    });\n    setMessages(prev => [...prev, {\n      sender: \"Я\",\n      text: message,\n      timestamp: new Date().toLocaleString()\n    }]);\n    setMessage(\"\");\n  };\n  const handleRecipientChange = e => {\n    const value = e.target.value;\n    setRecipientId(value);\n    recipientIdRef.current = value;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-header\",\n        children: \"\\uD83D\\uDCAC \\u041C\\u0435\\u0441\\u0441\\u0435\\u043D\\u0434\\u0436\\u0435\\u0440\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status\",\n        children: connected ? \"🟢 Подключено\" : \"🔴 Подключение...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: recipientId,\n        onChange: handleRecipientChange,\n        placeholder: \"ID \\u043F\\u043E\\u043B\\u0443\\u0447\\u0430\\u0442\\u0435\\u043B\\u044F\",\n        className: \"recipient-input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"messages\",\n        children: messages.map((msg, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: msg.sender\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 170,\n              columnNumber: 34\n            }, this), \" (\", msg.timestamp, \")\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: msg.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 29\n          }, this)]\n        }, idx, true, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSend,\n        className: \"input-form\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: message,\n          onChange: e => setMessage(e.target.value),\n          placeholder: \"\\u0412\\u0432\\u0435\\u0434\\u0438\\u0442\\u0435 \\u0441\\u043E\\u043E\\u0431\\u0449\\u0435\\u043D\\u0438\\u0435...\",\n          className: \"message-input\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"send-button\",\n          children: \"\\u041E\\u0442\\u043F\\u0440\\u0430\\u0432\\u0438\\u0442\\u044C\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 151,\n    columnNumber: 9\n  }, this);\n}\n_s(Chat, \"bBgHSYrPUVnFFq8L2BatFKVrerU=\");\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Client","SockJS","jwtDecode","jsxDEV","_jsxDEV","Chat","_s","message","setMessage","messages","setMessages","recipientId","setRecipientId","myId","setMyId","connected","setConnected","clientRef","recipientIdRef","getToken","match","document","cookie","RegExp","fetchMessages","recipientIdToFetch","token","res","fetch","headers","Authorization","ok","data","json","map","msg","sender","senderId","senderName","text","content","timestamp","Date","toLocaleString","console","error","status","err","alert","window","location","href","decoded","id","userId","socket","client","webSocketFactory","connectHeaders","reconnectDelay","onConnect","subscribe","body","JSON","parse","otherUser","current","isCurrentChat","onStompError","frame","activate","deactivate","handleSend","e","preventDefault","trim","payload","publish","destination","stringify","prev","handleRecipientChange","value","target","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","placeholder","idx","onSubmit","required","_c","$RefreshReg$"],"sources":["C:/Users/ludmi/IdeaProjects/Mesenger/src/main/resources/static/src/Chat.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport { Client } from \"@stomp/stompjs\";\r\nimport SockJS from \"sockjs-client\";\r\nimport { jwtDecode } from \"jwt-decode\";\r\nimport \"./Chat.css\";\r\n\r\nfunction Chat() {\r\n    const [message, setMessage] = useState(\"\");\r\n    const [messages, setMessages] = useState([]);\r\n    const [recipientId, setRecipientId] = useState(\"\");\r\n    const [myId, setMyId] = useState(null);\r\n    const [connected, setConnected] = useState(false);\r\n\r\n    const clientRef = useRef(null);\r\n    const recipientIdRef = useRef(\"\");\r\n\r\n    const getToken = () => {\r\n        const match = document.cookie.match(new RegExp(\"(^| )token=([^;]+)\"));\r\n        return match ? match[2] : null;\r\n    };\r\n\r\n    const fetchMessages = async (recipientIdToFetch) => {\r\n        try {\r\n            const token = getToken();\r\n            const res = await fetch(`/messages/${myId}/${recipientIdToFetch}`, {\r\n                headers: { Authorization: `Bearer ${token}` },\r\n            });\r\n            if (res.ok) {\r\n                const data = await res.json();\r\n                setMessages(\r\n                    data.map((msg) => ({\r\n                        sender: msg.senderId === myId ? \"Я\" : msg.senderName || \"Он\",\r\n                        text: msg.content,\r\n                        timestamp: new Date(msg.timestamp).toLocaleString(),\r\n                    }))\r\n                );\r\n            } else {\r\n                console.error(\"Ошибка загрузки сообщений:\", res.status);\r\n            }\r\n        } catch (err) {\r\n            console.error(\"Ошибка при загрузке сообщений:\", err);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (recipientId && myId) {\r\n            fetchMessages(recipientId);\r\n        }\r\n    }, [recipientId, myId]);\r\n\r\n    useEffect(() => {\r\n        const token = getToken();\r\n        if (!token) {\r\n            alert(\"❌ Нет токена. Пожалуйста, войдите снова.\");\r\n            window.location.href = \"/\";\r\n            return;\r\n        }\r\n\r\n        const decoded = jwtDecode(token);\r\n        const id = decoded.userId;\r\n        if (!id) {\r\n            alert(\"⚠️ Токен не содержит userId.\");\r\n            return;\r\n        }\r\n        setMyId(id);\r\n\r\n        const socket = new SockJS(\"http://localhost:8080/ws\");\r\n        const client = new Client({\r\n            webSocketFactory: () => socket,\r\n            connectHeaders: { Authorization: `Bearer ${token}` },\r\n            reconnectDelay: 5000,\r\n            onConnect: () => {\r\n                setConnected(true);\r\n\r\n                client.subscribe(\"/user/queue/messages\", (msg) => {\r\n                    const body = JSON.parse(msg.body);\r\n                    const otherUser = body.senderId === id ? body.recipientId : body.senderId;\r\n\r\n                    if (!recipientIdRef.current) {\r\n                        recipientIdRef.current = otherUser;\r\n                        setRecipientId(otherUser);\r\n                    }\r\n\r\n                    const isCurrentChat =\r\n                        (body.senderId === recipientIdRef.current && body.recipientId === id) ||\r\n                        (body.senderId === id && body.recipientId === recipientIdRef.current);\r\n\r\n                    if (isCurrentChat) {\r\n                        fetchMessages(recipientIdRef.current);\r\n                    } else {\r\n                        // Переключение на нового собеседника\r\n                        recipientIdRef.current = otherUser;\r\n                        setRecipientId(otherUser);\r\n                        fetchMessages(otherUser);\r\n                    }\r\n                });\r\n            },\r\n            onStompError: (frame) => {\r\n                console.error(\"STOMP ошибка: \", frame);\r\n            },\r\n        });\r\n\r\n        client.activate();\r\n        clientRef.current = client;\r\n\r\n        return () => {\r\n            client.deactivate();\r\n            setConnected(false);\r\n        };\r\n    }, []);\r\n\r\n    const handleSend = (e) => {\r\n        e.preventDefault();\r\n        const client = clientRef.current;\r\n        if (!message.trim() || !recipientId.trim()) return;\r\n\r\n        if (!client || !client.connected) {\r\n            alert(\"⛔ Подключение ещё не установлено.\");\r\n            return;\r\n        }\r\n\r\n        const payload = {\r\n            senderId: myId,\r\n            recipientId,\r\n            content: message,\r\n        };\r\n\r\n        client.publish({\r\n            destination: \"/app/chat\",\r\n            body: JSON.stringify(payload),\r\n        });\r\n\r\n        setMessages((prev) => [\r\n            ...prev,\r\n            {\r\n                sender: \"Я\",\r\n                text: message,\r\n                timestamp: new Date().toLocaleString(),\r\n            },\r\n        ]);\r\n        setMessage(\"\");\r\n    };\r\n\r\n    const handleRecipientChange = (e) => {\r\n        const value = e.target.value;\r\n        setRecipientId(value);\r\n        recipientIdRef.current = value;\r\n    };\r\n\r\n    return (\r\n        <div className=\"chat-container\">\r\n            <div className=\"chat-box\">\r\n                <div className=\"chat-header\">💬 Мессенджер</div>\r\n\r\n                <div className=\"status\">\r\n                    {connected ? \"🟢 Подключено\" : \"🔴 Подключение...\"}\r\n                </div>\r\n\r\n                <input\r\n                    type=\"text\"\r\n                    value={recipientId}\r\n                    onChange={handleRecipientChange}\r\n                    placeholder=\"ID получателя\"\r\n                    className=\"recipient-input\"\r\n                />\r\n\r\n                <div className=\"messages\">\r\n                    {messages.map((msg, idx) => (\r\n                        <div key={idx} className=\"message\">\r\n                            <div><strong>{msg.sender}</strong> ({msg.timestamp})</div>\r\n                            <div>{msg.text}</div>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n\r\n                <form onSubmit={handleSend} className=\"input-form\">\r\n                    <input\r\n                        type=\"text\"\r\n                        value={message}\r\n                        onChange={(e) => setMessage(e.target.value)}\r\n                        placeholder=\"Введите сообщение...\"\r\n                        className=\"message-input\"\r\n                        required\r\n                    />\r\n                    <button type=\"submit\" className=\"send-button\">Отправить</button>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Chat;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}