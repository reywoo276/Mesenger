{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ludmi\\\\IdeaProjects\\\\Mesenger\\\\src\\\\main\\\\resources\\\\static\\\\src\\\\Chat.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { Client } from \"@stomp/stompjs\";\nimport SockJS from \"sockjs-client\";\nimport { jwtDecode } from \"jwt-decode\";\nimport \"./Chat.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Chat() {\n  _s();\n  const [message, setMessage] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n  const [recipientId, setRecipientId] = useState(\"\");\n  const [myId, setMyId] = useState(null);\n  const [myName, setMyName] = useState(\"\");\n  const [connected, setConnected] = useState(false);\n  const clientRef = useRef(null);\n  const recipientIdRef = useRef(\"\");\n  const getToken = () => {\n    const match = document.cookie.match(new RegExp(\"(^| )token=([^;]+)\"));\n    return match ? match[2] : null;\n  };\n  const fetchMessages = async recipientId => {\n    try {\n      const token = getToken();\n      const res = await fetch(`/messages/${myId}/${recipientId}`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      if (res.ok) {\n        const data = await res.json();\n        setMessages(data.map(msg => ({\n          sender: msg.senderId === myId ? \"Я\" : \"Он\",\n          text: msg.content,\n          timestamp: msg.timestamp,\n          senderName: msg.senderName\n        })));\n      } else {\n        console.error(\"Ошибка загрузки сообщений:\", res.status);\n      }\n    } catch (err) {\n      console.error(\"Не удалось загрузить сообщения:\", err);\n    }\n  };\n\n  // Подгружаем сохранённый recipientId из localStorage\n  useEffect(() => {\n    const saved = localStorage.getItem(\"lastRecipientId\");\n    if (saved) {\n      setRecipientId(saved);\n      recipientIdRef.current = saved;\n    }\n  }, []);\n\n  // Загружаем историю при изменении получателя\n  useEffect(() => {\n    if (recipientId && myId) {\n      fetchMessages(recipientId);\n      localStorage.setItem(\"lastRecipientId\", recipientId);\n    }\n  }, [recipientId, myId]);\n\n  // WebSocket инициализация\n  useEffect(() => {\n    const token = getToken();\n    if (!token) {\n      alert(\"Нет токена. Войдите снова.\");\n      window.location.href = \"/\";\n      return;\n    }\n    const decoded = jwtDecode(token);\n    const id = decoded.userId;\n    const name = decoded.username;\n    setMyId(id);\n    setMyName(name);\n    const socket = new SockJS(\"http://localhost:8080/ws\");\n    const client = new Client({\n      webSocketFactory: () => socket,\n      connectHeaders: {\n        Authorization: `Bearer ${token}`\n      },\n      reconnectDelay: 5000,\n      onConnect: () => {\n        setConnected(true);\n        client.subscribe(\"/user/queue/messages\", msg => {\n          const body = JSON.parse(msg.body);\n          const otherUser = body.senderId === id ? body.recipientId : body.senderId;\n\n          // Если получатель ещё не выбран — выбираем его автоматически\n          if (!recipientIdRef.current) {\n            recipientIdRef.current = otherUser;\n            setRecipientId(otherUser);\n            localStorage.setItem(\"lastRecipientId\", otherUser);\n          }\n          fetchMessages(recipientIdRef.current);\n        });\n      },\n      onStompError: frame => {\n        console.error(\"STOMP ошибка: \", frame);\n      }\n    });\n    client.activate();\n    clientRef.current = client;\n    return () => {\n      client.deactivate();\n      setConnected(false);\n    };\n  }, []);\n  const handleSend = e => {\n    e.preventDefault();\n    const client = clientRef.current;\n    if (!message.trim() || !recipientId.trim()) return;\n    if (!client || !client.connected) {\n      alert(\"Подключение не установлено.\");\n      return;\n    }\n    const payload = {\n      senderId: myId,\n      recipientId,\n      content: message,\n      senderName: myName,\n      recipientName: \"Имя_получателя\"\n    };\n    client.publish({\n      destination: \"/app/chat\",\n      body: JSON.stringify(payload)\n    });\n    setMessages(prev => [...prev, {\n      sender: \"Я\",\n      text: message,\n      timestamp: new Date().toLocaleString(),\n      senderName: myName\n    }]);\n    setMessage(\"\");\n  };\n  const handleRecipientChange = e => {\n    const value = e.target.value;\n    setRecipientId(value);\n    recipientIdRef.current = value;\n    localStorage.setItem(\"lastRecipientId\", value);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-header\",\n        children: \"\\uD83D\\uDCAC \\u041C\\u0435\\u0441\\u0441\\u0435\\u043D\\u0434\\u0436\\u0435\\u0440\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status\",\n        children: connected ? \"🟢 Подключено\" : \"🔴 Подключение...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: recipientId,\n        onChange: handleRecipientChange,\n        placeholder: \"ID \\u043F\\u043E\\u043B\\u0443\\u0447\\u0430\\u0442\\u0435\\u043B\\u044F\",\n        className: \"recipient-input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"messages\",\n        children: messages.map((msg, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message\",\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: [msg.senderName, \":\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 29\n          }, this), \" \", msg.text, \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n            children: msg.timestamp\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 75\n          }, this)]\n        }, idx, true, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSend,\n        className: \"input-form\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: message,\n          onChange: e => setMessage(e.target.value),\n          placeholder: \"\\u0412\\u0432\\u0435\\u0434\\u0438\\u0442\\u0435 \\u0441\\u043E\\u043E\\u0431\\u0449\\u0435\\u043D\\u0438\\u0435...\",\n          className: \"message-input\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"send-button\",\n          children: \"\\u041E\\u0442\\u043F\\u0440\\u0430\\u0432\\u0438\\u0442\\u044C\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 153,\n    columnNumber: 9\n  }, this);\n}\n_s(Chat, \"0bvpdIrxbW9VU+rMtThB/2j+lW4=\");\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Client","SockJS","jwtDecode","jsxDEV","_jsxDEV","Chat","_s","message","setMessage","messages","setMessages","recipientId","setRecipientId","myId","setMyId","myName","setMyName","connected","setConnected","clientRef","recipientIdRef","getToken","match","document","cookie","RegExp","fetchMessages","token","res","fetch","headers","Authorization","ok","data","json","map","msg","sender","senderId","text","content","timestamp","senderName","console","error","status","err","saved","localStorage","getItem","current","setItem","alert","window","location","href","decoded","id","userId","name","username","socket","client","webSocketFactory","connectHeaders","reconnectDelay","onConnect","subscribe","body","JSON","parse","otherUser","onStompError","frame","activate","deactivate","handleSend","e","preventDefault","trim","payload","recipientName","publish","destination","stringify","prev","Date","toLocaleString","handleRecipientChange","value","target","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","placeholder","idx","onSubmit","required","_c","$RefreshReg$"],"sources":["C:/Users/ludmi/IdeaProjects/Mesenger/src/main/resources/static/src/Chat.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport { Client } from \"@stomp/stompjs\";\r\nimport SockJS from \"sockjs-client\";\r\nimport { jwtDecode } from \"jwt-decode\";\r\nimport \"./Chat.css\";\r\n\r\nfunction Chat() {\r\n    const [message, setMessage] = useState(\"\");\r\n    const [messages, setMessages] = useState([]);\r\n    const [recipientId, setRecipientId] = useState(\"\");\r\n    const [myId, setMyId] = useState(null);\r\n    const [myName, setMyName] = useState(\"\");\r\n    const [connected, setConnected] = useState(false);\r\n\r\n    const clientRef = useRef(null);\r\n    const recipientIdRef = useRef(\"\");\r\n\r\n    const getToken = () => {\r\n        const match = document.cookie.match(new RegExp(\"(^| )token=([^;]+)\"));\r\n        return match ? match[2] : null;\r\n    };\r\n\r\n    const fetchMessages = async (recipientId) => {\r\n        try {\r\n            const token = getToken();\r\n            const res = await fetch(`/messages/${myId}/${recipientId}`, {\r\n                headers: { Authorization: `Bearer ${token}` },\r\n            });\r\n            if (res.ok) {\r\n                const data = await res.json();\r\n                setMessages(\r\n                    data.map((msg) => ({\r\n                        sender: msg.senderId === myId ? \"Я\" : \"Он\",\r\n                        text: msg.content,\r\n                        timestamp: msg.timestamp,\r\n                        senderName: msg.senderName,\r\n                    }))\r\n                );\r\n            } else {\r\n                console.error(\"Ошибка загрузки сообщений:\", res.status);\r\n            }\r\n        } catch (err) {\r\n            console.error(\"Не удалось загрузить сообщения:\", err);\r\n        }\r\n    };\r\n\r\n    // Подгружаем сохранённый recipientId из localStorage\r\n    useEffect(() => {\r\n        const saved = localStorage.getItem(\"lastRecipientId\");\r\n        if (saved) {\r\n            setRecipientId(saved);\r\n            recipientIdRef.current = saved;\r\n        }\r\n    }, []);\r\n\r\n    // Загружаем историю при изменении получателя\r\n    useEffect(() => {\r\n        if (recipientId && myId) {\r\n            fetchMessages(recipientId);\r\n            localStorage.setItem(\"lastRecipientId\", recipientId);\r\n        }\r\n    }, [recipientId, myId]);\r\n\r\n    // WebSocket инициализация\r\n    useEffect(() => {\r\n        const token = getToken();\r\n        if (!token) {\r\n            alert(\"Нет токена. Войдите снова.\");\r\n            window.location.href = \"/\";\r\n            return;\r\n        }\r\n\r\n        const decoded = jwtDecode(token);\r\n        const id = decoded.userId;\r\n        const name = decoded.username;\r\n        setMyId(id);\r\n        setMyName(name);\r\n\r\n        const socket = new SockJS(\"http://localhost:8080/ws\");\r\n        const client = new Client({\r\n            webSocketFactory: () => socket,\r\n            connectHeaders: { Authorization: `Bearer ${token}` },\r\n            reconnectDelay: 5000,\r\n            onConnect: () => {\r\n                setConnected(true);\r\n\r\n                client.subscribe(\"/user/queue/messages\", (msg) => {\r\n                    const body = JSON.parse(msg.body);\r\n                    const otherUser = body.senderId === id ? body.recipientId : body.senderId;\r\n\r\n                    // Если получатель ещё не выбран — выбираем его автоматически\r\n                    if (!recipientIdRef.current) {\r\n                        recipientIdRef.current = otherUser;\r\n                        setRecipientId(otherUser);\r\n                        localStorage.setItem(\"lastRecipientId\", otherUser);\r\n                    }\r\n\r\n                    fetchMessages(recipientIdRef.current);\r\n                });\r\n            },\r\n            onStompError: (frame) => {\r\n                console.error(\"STOMP ошибка: \", frame);\r\n            },\r\n        });\r\n\r\n        client.activate();\r\n        clientRef.current = client;\r\n\r\n        return () => {\r\n            client.deactivate();\r\n            setConnected(false);\r\n        };\r\n    }, []);\r\n\r\n    const handleSend = (e) => {\r\n        e.preventDefault();\r\n        const client = clientRef.current;\r\n        if (!message.trim() || !recipientId.trim()) return;\r\n\r\n        if (!client || !client.connected) {\r\n            alert(\"Подключение не установлено.\");\r\n            return;\r\n        }\r\n\r\n        const payload = {\r\n            senderId: myId,\r\n            recipientId,\r\n            content: message,\r\n            senderName: myName,\r\n            recipientName: \"Имя_получателя\",\r\n        };\r\n\r\n        client.publish({\r\n            destination: \"/app/chat\",\r\n            body: JSON.stringify(payload),\r\n        });\r\n\r\n        setMessages((prev) => [\r\n            ...prev,\r\n            { sender: \"Я\", text: message, timestamp: new Date().toLocaleString(), senderName: myName },\r\n        ]);\r\n        setMessage(\"\");\r\n    };\r\n\r\n    const handleRecipientChange = (e) => {\r\n        const value = e.target.value;\r\n        setRecipientId(value);\r\n        recipientIdRef.current = value;\r\n        localStorage.setItem(\"lastRecipientId\", value);\r\n    };\r\n\r\n    return (\r\n        <div className=\"chat-container\">\r\n            <div className=\"chat-box\">\r\n                <div className=\"chat-header\">💬 Мессенджер</div>\r\n                <div className=\"status\">{connected ? \"🟢 Подключено\" : \"🔴 Подключение...\"}</div>\r\n\r\n                <input\r\n                    type=\"text\"\r\n                    value={recipientId}\r\n                    onChange={handleRecipientChange}\r\n                    placeholder=\"ID получателя\"\r\n                    className=\"recipient-input\"\r\n                />\r\n\r\n                <div className=\"messages\">\r\n                    {messages.map((msg, idx) => (\r\n                        <div key={idx} className=\"message\">\r\n                            <strong>{msg.senderName}:</strong> {msg.text} <span>{msg.timestamp}</span>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n\r\n                <form onSubmit={handleSend} className=\"input-form\">\r\n                    <input\r\n                        type=\"text\"\r\n                        value={message}\r\n                        onChange={(e) => setMessage(e.target.value)}\r\n                        placeholder=\"Введите сообщение...\"\r\n                        className=\"message-input\"\r\n                        required\r\n                    />\r\n                    <button type=\"submit\" className=\"send-button\">\r\n                        Отправить\r\n                    </button>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Chat;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}