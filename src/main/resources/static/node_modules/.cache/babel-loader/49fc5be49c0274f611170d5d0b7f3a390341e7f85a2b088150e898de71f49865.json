{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ludmi\\\\IdeaProjects\\\\Mesenger\\\\src\\\\main\\\\resources\\\\static\\\\src\\\\Chat.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { Client } from \"@stomp/stompjs\";\nimport SockJS from \"sockjs-client\";\nimport { jwtDecode } from \"jwt-decode\";\nimport \"./Chat.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Chat() {\n  _s();\n  const [message, setMessage] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n  const [recipientId, setRecipientId] = useState(\"\");\n  const [myId, setMyId] = useState(null);\n  const [recipientName, setRecipientName] = useState(\"\");\n  const [myName, setMyName] = useState(null);\n  const [connected, setConnected] = useState(false);\n  const clientRef = useRef(null);\n  const recipientIdRef = useRef(\"\");\n  const getToken = () => {\n    const match = document.cookie.match(new RegExp(\"(^| )token=([^;]+)\"));\n    const token = match ? match[2] : null;\n    console.log(\"🔑 Получаем токен из cookies:\", token);\n    return token;\n  };\n  const fetchMessages = async recipientId => {\n    console.log(\"📡 fetchMessages вызван для recipientId:\", recipientId);\n    try {\n      const token = getToken();\n      console.log(\"🛂 Используем токен:\", token);\n      const res = await fetch(`/messages/${myId}/${recipientId}`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      if (res.ok) {\n        const data = await res.json();\n        console.log(\"📨 Загружено сообщений:\", data.length);\n        setMessages(data.map(msg => ({\n          sender: msg.senderId === myId ? \"Я\" : \"Он\",\n          text: msg.content\n        })));\n      } else {\n        console.error(\"❌ Ошибка загрузки сообщений:\", res.status);\n      }\n    } catch (err) {\n      console.error(\"❌ Не удалось загрузить сообщения:\", err);\n    }\n  };\n  useEffect(() => {\n    console.log(\"🔁 useEffect: [recipientId, myId] сработал\");\n    if (recipientId && myId) {\n      console.log(\"📥 Загружаем сообщения для получателя:\", recipientId);\n      fetchMessages(recipientId);\n    }\n  }, [recipientId, myId]);\n  useEffect(() => {\n    console.log(\"🚀 useEffect: инициализация WebSocket\");\n    const token = getToken();\n    if (!token) {\n      alert(\"❌ Нет токена. Пожалуйста, войдите снова.\");\n      window.location.href = \"/\";\n      return;\n    }\n    const decoded = jwtDecode(token);\n    const id = decoded.userId;\n    const name = decoded.username;\n    if (!id) {\n      alert(\"⚠️ Токен не содержит userId. Нужна корректировка бэка.\");\n      return;\n    }\n    if (!name) {\n      alert(\"⚠️ Токен не содержит userId. Нужна корректировка бэка.\");\n      return;\n    }\n    console.log(\"🔓 Декодирован userId:\", id, name);\n    setMyId(id);\n    setMyName(name);\n    const socket = new SockJS(\"http://localhost:8080/ws\");\n    const client = new Client({\n      webSocketFactory: () => socket,\n      connectHeaders: {\n        Authorization: `Bearer ${token}`\n      },\n      reconnectDelay: 5000,\n      onConnect: () => {\n        console.log(\"🟢 Подключено к WebSocket\");\n        console.log(\"📌 recipientIdRef при подключении:\", recipientIdRef.current);\n        setConnected(true);\n        client.subscribe(\"/user/queue/messages\", msg => {\n          const body = JSON.parse(msg.body);\n          console.log(\"📨 Новое сообщение из WebSocket:\", body);\n          const otherUser = body.senderId === id ? body.recipientId : body.senderId;\n          if (!recipientIdRef.current) {\n            console.log(\"🆕 Устанавливаем recipientIdRef.current:\", otherUser);\n            recipientIdRef.current = otherUser;\n            setRecipientId(otherUser);\n          }\n          const isCurrentChat = body.senderId === recipientIdRef.current && body.recipientId === id || body.senderId === id && body.recipientId === recipientIdRef.current;\n          if (isCurrentChat) {\n            console.log(\"🔄 Обновляем сообщения для:\", recipientIdRef.current);\n            fetchMessages(recipientIdRef.current);\n          } else {\n            console.log(\"📭 Сообщение не отображено, так как открыт другой чат.\");\n          }\n        });\n      },\n      onStompError: frame => {\n        console.error(\"💥 STOMP ошибка: \", frame);\n      }\n    });\n    client.activate();\n    clientRef.current = client;\n    return () => {\n      client.deactivate();\n      setConnected(false);\n    };\n  }, []);\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      console.log(\"⏱️ recipientId каждые 5 сек:\", recipientIdRef.current);\n    }, 5000);\n    return () => clearInterval(intervalId);\n  }, []);\n  const handleSend = e => {\n    e.preventDefault();\n    const client = clientRef.current;\n    console.log(\"📤 handleSend: клиент:\", client);\n    if (!message.trim() || !recipientId.trim()) return;\n    if (!client || !client.connected) {\n      alert(\"⛔ Подключение ещё не установлено. Подождите немного.\");\n      return;\n    }\n    const payload = {\n      senderId: myId,\n      recipientId,\n      content: message\n    };\n    console.log(\"📤 Отправляем сообщение:\", payload);\n    client.publish({\n      destination: \"/app/chat\",\n      body: JSON.stringify(payload)\n    });\n    setMessages(prev => [...prev, {\n      sender: \"Я\",\n      text: message\n    }]);\n    setMessage(\"\");\n  };\n  const handleRecipientChange = e => {\n    const value = e.target.value;\n    setRecipientId(value);\n    recipientIdRef.current = value;\n    console.log(\"✏️ Введён новый recipientId:\", value);\n    console.log(\"📌 Обновлён recipientIdRef.current:\", value);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-header\",\n        children: \"\\uD83D\\uDCAC \\u041C\\u0435\\u0441\\u0441\\u0435\\u043D\\u0434\\u0436\\u0435\\u0440\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status\",\n        children: connected ? \"🟢 Подключено\" : \"🔴 Подключение...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: recipientId,\n        onChange: handleRecipientChange,\n        placeholder: \"ID \\u043F\\u043E\\u043B\\u0443\\u0447\\u0430\\u0442\\u0435\\u043B\\u044F\",\n        className: \"recipient-input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"messages\",\n        children: messages.map((msg, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message\",\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: [msg.sender, \":\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 29\n          }, this), \" \", msg.text]\n        }, idx, true, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSend,\n        className: \"input-form\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: message,\n          onChange: e => setMessage(e.target.value),\n          placeholder: \"\\u0412\\u0432\\u0435\\u0434\\u0438\\u0442\\u0435 \\u0441\\u043E\\u043E\\u0431\\u0449\\u0435\\u043D\\u0438\\u0435...\",\n          className: \"message-input\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"send-button\",\n          children: \"\\u041E\\u0442\\u043F\\u0440\\u0430\\u0432\\u0438\\u0442\\u044C\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 178,\n    columnNumber: 9\n  }, this);\n}\n_s(Chat, \"TikwngUxc2HPN3ovQZXJ3AvyjJ4=\");\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Client","SockJS","jwtDecode","jsxDEV","_jsxDEV","Chat","_s","message","setMessage","messages","setMessages","recipientId","setRecipientId","myId","setMyId","recipientName","setRecipientName","myName","setMyName","connected","setConnected","clientRef","recipientIdRef","getToken","match","document","cookie","RegExp","token","console","log","fetchMessages","res","fetch","headers","Authorization","ok","data","json","length","map","msg","sender","senderId","text","content","error","status","err","alert","window","location","href","decoded","id","userId","name","username","socket","client","webSocketFactory","connectHeaders","reconnectDelay","onConnect","current","subscribe","body","JSON","parse","otherUser","isCurrentChat","onStompError","frame","activate","deactivate","intervalId","setInterval","clearInterval","handleSend","e","preventDefault","trim","payload","publish","destination","stringify","prev","handleRecipientChange","value","target","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","placeholder","idx","onSubmit","required","_c","$RefreshReg$"],"sources":["C:/Users/ludmi/IdeaProjects/Mesenger/src/main/resources/static/src/Chat.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport { Client } from \"@stomp/stompjs\";\r\nimport SockJS from \"sockjs-client\";\r\nimport { jwtDecode } from \"jwt-decode\";\r\nimport \"./Chat.css\";\r\n\r\nfunction Chat() {\r\n    const [message, setMessage] = useState(\"\");\r\n    const [messages, setMessages] = useState([]);\r\n    const [recipientId, setRecipientId] = useState(\"\");\r\n    const [myId, setMyId] = useState(null);\r\n    const [recipientName, setRecipientName] = useState(\"\");\r\n    const [myName, setMyName] = useState(null);\r\n    const [connected, setConnected] = useState(false);\r\n\r\n    const clientRef = useRef(null);\r\n    const recipientIdRef = useRef(\"\");\r\n\r\n    const getToken = () => {\r\n        const match = document.cookie.match(new RegExp(\"(^| )token=([^;]+)\"));\r\n        const token = match ? match[2] : null;\r\n        console.log(\"🔑 Получаем токен из cookies:\", token);\r\n        return token;\r\n    };\r\n\r\n    const fetchMessages = async (recipientId) => {\r\n        console.log(\"📡 fetchMessages вызван для recipientId:\", recipientId);\r\n        try {\r\n            const token = getToken();\r\n            console.log(\"🛂 Используем токен:\", token);\r\n\r\n            const res = await fetch(`/messages/${myId}/${recipientId}`, {\r\n                headers: { Authorization: `Bearer ${token}` },\r\n            });\r\n            if (res.ok) {\r\n                const data = await res.json();\r\n                console.log(\"📨 Загружено сообщений:\", data.length);\r\n                setMessages(\r\n                    data.map((msg) => ({\r\n                        sender: msg.senderId === myId ? \"Я\" : \"Он\",\r\n                        text: msg.content,\r\n                    }))\r\n                );\r\n            } else {\r\n                console.error(\"❌ Ошибка загрузки сообщений:\", res.status);\r\n            }\r\n        } catch (err) {\r\n            console.error(\"❌ Не удалось загрузить сообщения:\", err);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        console.log(\"🔁 useEffect: [recipientId, myId] сработал\");\r\n        if (recipientId && myId) {\r\n            console.log(\"📥 Загружаем сообщения для получателя:\", recipientId);\r\n            fetchMessages(recipientId);\r\n        }\r\n    }, [recipientId, myId]);\r\n\r\n    useEffect(() => {\r\n        console.log(\"🚀 useEffect: инициализация WebSocket\");\r\n\r\n        const token = getToken();\r\n        if (!token) {\r\n            alert(\"❌ Нет токена. Пожалуйста, войдите снова.\");\r\n            window.location.href = \"/\";\r\n            return;\r\n        }\r\n\r\n        const decoded = jwtDecode(token);\r\n        const id = decoded.userId;\r\n        const name = decoded.username;\r\n        if (!id) {\r\n            alert(\"⚠️ Токен не содержит userId. Нужна корректировка бэка.\");\r\n            return;\r\n        }\r\n        if (!name) {\r\n            alert(\"⚠️ Токен не содержит userId. Нужна корректировка бэка.\");\r\n            return;\r\n        }\r\n        console.log(\"🔓 Декодирован userId:\", id, name);\r\n        setMyId(id);\r\n        setMyName(name);\r\n\r\n        const socket = new SockJS(\"http://localhost:8080/ws\");\r\n        const client = new Client({\r\n            webSocketFactory: () => socket,\r\n            connectHeaders: { Authorization: `Bearer ${token}` },\r\n            reconnectDelay: 5000,\r\n            onConnect: () => {\r\n                console.log(\"🟢 Подключено к WebSocket\");\r\n                console.log(\"📌 recipientIdRef при подключении:\", recipientIdRef.current);\r\n                setConnected(true);\r\n\r\n                client.subscribe(\"/user/queue/messages\", (msg) => {\r\n                    const body = JSON.parse(msg.body);\r\n                    console.log(\"📨 Новое сообщение из WebSocket:\", body);\r\n\r\n                    const otherUser = body.senderId === id ? body.recipientId : body.senderId;\r\n\r\n                    if (!recipientIdRef.current) {\r\n                        console.log(\"🆕 Устанавливаем recipientIdRef.current:\", otherUser);\r\n                        recipientIdRef.current = otherUser;\r\n                        setRecipientId(otherUser);\r\n                    }\r\n\r\n                    const isCurrentChat =\r\n                        (body.senderId === recipientIdRef.current && body.recipientId === id) ||\r\n                        (body.senderId === id && body.recipientId === recipientIdRef.current);\r\n\r\n                    if (isCurrentChat) {\r\n                        console.log(\"🔄 Обновляем сообщения для:\", recipientIdRef.current);\r\n                        fetchMessages(recipientIdRef.current);\r\n                    } else {\r\n                        console.log(\"📭 Сообщение не отображено, так как открыт другой чат.\");\r\n                    }\r\n                });\r\n            },\r\n            onStompError: (frame) => {\r\n                console.error(\"💥 STOMP ошибка: \", frame);\r\n            },\r\n        });\r\n\r\n        client.activate();\r\n        clientRef.current = client;\r\n\r\n        return () => {\r\n            client.deactivate();\r\n            setConnected(false);\r\n        };\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const intervalId = setInterval(() => {\r\n            console.log(\"⏱️ recipientId каждые 5 сек:\", recipientIdRef.current);\r\n        }, 5000);\r\n        return () => clearInterval(intervalId);\r\n    }, []);\r\n\r\n    const handleSend = (e) => {\r\n        e.preventDefault();\r\n        const client = clientRef.current;\r\n        console.log(\"📤 handleSend: клиент:\", client);\r\n\r\n        if (!message.trim() || !recipientId.trim()) return;\r\n\r\n        if (!client || !client.connected) {\r\n            alert(\"⛔ Подключение ещё не установлено. Подождите немного.\");\r\n            return;\r\n        }\r\n\r\n        const payload = {\r\n            senderId: myId,\r\n            recipientId,\r\n            content: message,\r\n        };\r\n\r\n        console.log(\"📤 Отправляем сообщение:\", payload);\r\n\r\n        client.publish({\r\n            destination: \"/app/chat\",\r\n            body: JSON.stringify(payload),\r\n        });\r\n\r\n        setMessages((prev) => [...prev, { sender: \"Я\", text: message }]);\r\n        setMessage(\"\");\r\n    };\r\n\r\n    const handleRecipientChange = (e) => {\r\n        const value = e.target.value;\r\n        setRecipientId(value);\r\n        recipientIdRef.current = value;\r\n        console.log(\"✏️ Введён новый recipientId:\", value);\r\n        console.log(\"📌 Обновлён recipientIdRef.current:\", value);\r\n    };\r\n\r\n    return (\r\n        <div className=\"chat-container\">\r\n            <div className=\"chat-box\">\r\n                <div className=\"chat-header\">💬 Мессенджер</div>\r\n\r\n                <div className=\"status\">\r\n                    {connected ? \"🟢 Подключено\" : \"🔴 Подключение...\"}\r\n                </div>\r\n\r\n                <input\r\n                    type=\"text\"\r\n                    value={recipientId}\r\n                    onChange={handleRecipientChange}\r\n                    placeholder=\"ID получателя\"\r\n                    className=\"recipient-input\"\r\n                />\r\n\r\n                <div className=\"messages\">\r\n                    {messages.map((msg, idx) => (\r\n                        <div key={idx} className=\"message\">\r\n                            <strong>{msg.sender}:</strong> {msg.text}\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n\r\n                <form onSubmit={handleSend} className=\"input-form\">\r\n                    <input\r\n                        type=\"text\"\r\n                        value={message}\r\n                        onChange={(e) => setMessage(e.target.value)}\r\n                        placeholder=\"Введите сообщение...\"\r\n                        className=\"message-input\"\r\n                        required\r\n                    />\r\n                    <button type=\"submit\" className=\"send-button\">\r\n                        Отправить\r\n                    </button>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Chat;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}