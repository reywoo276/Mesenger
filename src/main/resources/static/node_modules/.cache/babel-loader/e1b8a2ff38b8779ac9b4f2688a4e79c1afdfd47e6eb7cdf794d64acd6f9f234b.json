{"ast":null,"code":"useEffect(() => {\n  const token = getToken();\n  if (!token) {\n    alert(\"Нет токена. Пожалуйста, войдите снова.\");\n    window.location.href = \"/\";\n    return;\n  }\n  const decoded = jwtDecode(token);\n  const id = decoded.userId;\n  if (!id) {\n    alert(\"Токен не содержит userId.\");\n    return;\n  }\n  setMyId(id);\n  setMyName(decoded.username);\n  const Stomp = require(\"stompjs\");\n  let sock = new SockJS(\"http://localhost:8080/ws\");\n  stompClient = Stomp.over(sock);\n  stompClient.connect({\n    Authorization: `Bearer ${token}`\n  }, () => {\n    setConnected(true);\n    console.log(\"✅ WebSocket подключен\");\n    stompClient.subscribe(`/user/${id}/queue/messages`, msg => {\n      const body = JSON.parse(msg.body);\n      const otherUserId = body.senderId;\n      if (recipientIdRef.current === otherUserId) {\n        setMessages(prevMessages => [...prevMessages, {\n          sender: body.senderId === myId ? \"Я\" : \"Он\",\n          text: body.content,\n          timestamp: body.timestamp,\n          senderName: body.senderName\n        }]);\n      } else {\n        console.log(`📩 Новое сообщение от ${body.senderName}`);\n      }\n    });\n  }, error => {\n    console.error(\"Ошибка WebSocket:\", error);\n    setConnected(false);\n  });\n  return () => {\n    if (stompClient) {\n      stompClient.disconnect(() => {\n        console.log(\"🔌 Отключено\");\n        setConnected(false);\n      });\n    }\n  };\n}, []);","map":{"version":3,"names":["useEffect","token","getToken","alert","window","location","href","decoded","jwtDecode","id","userId","setMyId","setMyName","username","Stomp","require","sock","SockJS","stompClient","over","connect","Authorization","setConnected","console","log","subscribe","msg","body","JSON","parse","otherUserId","senderId","recipientIdRef","current","setMessages","prevMessages","sender","myId","text","content","timestamp","senderName","error","disconnect"],"sources":["C:/Users/ludmi/IdeaProjects/Mesenger/src/main/resources/static/src/Chat.js"],"sourcesContent":["useEffect(() => {\r\n    const token = getToken();\r\n    if (!token) {\r\n        alert(\"Нет токена. Пожалуйста, войдите снова.\");\r\n        window.location.href = \"/\";\r\n        return;\r\n    }\r\n\r\n    const decoded = jwtDecode(token);\r\n    const id = decoded.userId;\r\n    if (!id) {\r\n        alert(\"Токен не содержит userId.\");\r\n        return;\r\n    }\r\n    setMyId(id);\r\n    setMyName(decoded.username);\r\n\r\n    const Stomp = require(\"stompjs\");\r\n    let sock = new SockJS(\"http://localhost:8080/ws\");\r\n    stompClient = Stomp.over(sock);\r\n\r\n    stompClient.connect(\r\n        { Authorization: `Bearer ${token}` },\r\n        () => {\r\n            setConnected(true);\r\n            console.log(\"✅ WebSocket подключен\");\r\n\r\n            stompClient.subscribe(\r\n                `/user/${id}/queue/messages`,\r\n                (msg) => {\r\n                    const body = JSON.parse(msg.body);\r\n                    const otherUserId = body.senderId;\r\n\r\n                    if (recipientIdRef.current === otherUserId) {\r\n                        setMessages((prevMessages) => [\r\n                            ...prevMessages,\r\n                            {\r\n                                sender: body.senderId === myId ? \"Я\" : \"Он\",\r\n                                text: body.content,\r\n                                timestamp: body.timestamp,\r\n                                senderName: body.senderName,\r\n                            },\r\n                        ]);\r\n                    } else {\r\n                        console.log(`📩 Новое сообщение от ${body.senderName}`);\r\n                    }\r\n                }\r\n            );\r\n        },\r\n        (error) => {\r\n            console.error(\"Ошибка WebSocket:\", error);\r\n            setConnected(false);\r\n        }\r\n    );\r\n\r\n    return () => {\r\n        if (stompClient) {\r\n            stompClient.disconnect(() => {\r\n                console.log(\"🔌 Отключено\");\r\n                setConnected(false);\r\n            });\r\n        }\r\n    };\r\n}, []);\r\n"],"mappings":"AAAAA,SAAS,CAAC,MAAM;EACZ,MAAMC,KAAK,GAAGC,QAAQ,CAAC,CAAC;EACxB,IAAI,CAACD,KAAK,EAAE;IACRE,KAAK,CAAC,wCAAwC,CAAC;IAC/CC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,GAAG;IAC1B;EACJ;EAEA,MAAMC,OAAO,GAAGC,SAAS,CAACP,KAAK,CAAC;EAChC,MAAMQ,EAAE,GAAGF,OAAO,CAACG,MAAM;EACzB,IAAI,CAACD,EAAE,EAAE;IACLN,KAAK,CAAC,2BAA2B,CAAC;IAClC;EACJ;EACAQ,OAAO,CAACF,EAAE,CAAC;EACXG,SAAS,CAACL,OAAO,CAACM,QAAQ,CAAC;EAE3B,MAAMC,KAAK,GAAGC,OAAO,CAAC,SAAS,CAAC;EAChC,IAAIC,IAAI,GAAG,IAAIC,MAAM,CAAC,0BAA0B,CAAC;EACjDC,WAAW,GAAGJ,KAAK,CAACK,IAAI,CAACH,IAAI,CAAC;EAE9BE,WAAW,CAACE,OAAO,CACf;IAAEC,aAAa,EAAE,UAAUpB,KAAK;EAAG,CAAC,EACpC,MAAM;IACFqB,YAAY,CAAC,IAAI,CAAC;IAClBC,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;IAEpCN,WAAW,CAACO,SAAS,CACjB,SAAShB,EAAE,iBAAiB,EAC3BiB,GAAG,IAAK;MACL,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACH,GAAG,CAACC,IAAI,CAAC;MACjC,MAAMG,WAAW,GAAGH,IAAI,CAACI,QAAQ;MAEjC,IAAIC,cAAc,CAACC,OAAO,KAAKH,WAAW,EAAE;QACxCI,WAAW,CAAEC,YAAY,IAAK,CAC1B,GAAGA,YAAY,EACf;UACIC,MAAM,EAAET,IAAI,CAACI,QAAQ,KAAKM,IAAI,GAAG,GAAG,GAAG,IAAI;UAC3CC,IAAI,EAAEX,IAAI,CAACY,OAAO;UAClBC,SAAS,EAAEb,IAAI,CAACa,SAAS;UACzBC,UAAU,EAAEd,IAAI,CAACc;QACrB,CAAC,CACJ,CAAC;MACN,CAAC,MAAM;QACHlB,OAAO,CAACC,GAAG,CAAC,yBAAyBG,IAAI,CAACc,UAAU,EAAE,CAAC;MAC3D;IACJ,CACJ,CAAC;EACL,CAAC,EACAC,KAAK,IAAK;IACPnB,OAAO,CAACmB,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAAC;IACzCpB,YAAY,CAAC,KAAK,CAAC;EACvB,CACJ,CAAC;EAED,OAAO,MAAM;IACT,IAAIJ,WAAW,EAAE;MACbA,WAAW,CAACyB,UAAU,CAAC,MAAM;QACzBpB,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;QAC3BF,YAAY,CAAC,KAAK,CAAC;MACvB,CAAC,CAAC;IACN;EACJ,CAAC;AACL,CAAC,EAAE,EAAE,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}