{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ludmi\\\\IdeaProjects\\\\Mesenger\\\\src\\\\main\\\\resources\\\\static\\\\src\\\\Chat.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { Client } from \"@stomp/stompjs\";\nimport SockJS from \"sockjs-client\";\nimport { jwtDecode } from \"jwt-decode\";\nimport { useRecoilState } from \"recoil\";\nimport { loggedInUser, chatActiveContact, chatMessages } from \"./globalState\";\nimport \"./Chat.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Chat() {\n  _s();\n  const [message, setMessage] = useState(\"\");\n  const [connected, setConnected] = useState(false);\n  const [allUsers, setAllUsers] = useState([]);\n  const [user, setUser] = useRecoilState(loggedInUser);\n  const [recipientId, setRecipientId] = useRecoilState(chatActiveContact);\n  const [messages, setMessages] = useRecoilState(chatMessages);\n  const clientRef = useRef(null);\n  const recipientIdRef = useRef(\"\");\n  const getToken = () => {\n    const match = document.cookie.match(new RegExp(\"(^| )token=([^;]+)\"));\n    return match ? match[2] : null;\n  };\n  const fetchMessages = async recipientId => {\n    try {\n      const token = getToken();\n      const res = await fetch(`/messages/${user.userId}/${recipientId}`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      if (res.ok) {\n        const data = await res.json();\n        setMessages(data.map(msg => ({\n          sender: msg.senderId === user.userId ? \"Я\" : \"Он\",\n          text: msg.content,\n          timestamp: msg.timestamp,\n          senderName: msg.senderName\n        })));\n      } else {\n        console.error(\"Ошибка загрузки сообщений:\", res.status);\n      }\n    } catch (err) {\n      console.error(\"Ошибка при загрузке сообщений:\", err);\n    }\n  };\n  useEffect(() => {\n    if (recipientId && user.userId) {\n      fetchMessages(recipientId);\n    }\n  }, [recipientId, user.userId]);\n  useEffect(() => {\n    const token = getToken();\n    if (!token) {\n      alert(\"Нет токена. Пожалуйста, войдите снова.\");\n      window.location.href = \"/\";\n      return;\n    }\n    const decoded = jwtDecode(token);\n    const id = decoded.userId;\n    const name = decoded.username;\n    if (!id) {\n      alert(\"Токен не содержит userId.\");\n      return;\n    }\n    setUser({\n      userId: id,\n      username: name\n    });\n    const socket = new SockJS(\"http://localhost:8080/ws\");\n    const client = new Client({\n      webSocketFactory: () => socket,\n      connectHeaders: {\n        Authorization: `Bearer ${token}`\n      },\n      reconnectDelay: 5000,\n      onConnect: () => {\n        setConnected(true);\n        client.subscribe(`/user/${id}/queue/messages`, msg => {\n          const body = JSON.parse(msg.body);\n          const otherUserId = body.senderId;\n          if (recipientIdRef.current === otherUserId) {\n            setMessages(prevMessages => [...prevMessages, {\n              sender: body.senderId === id ? \"Я\" : \"Он\",\n              text: body.content,\n              timestamp: body.timestamp,\n              senderName: body.senderName\n            }]);\n          } else {\n            console.log(`📩 Новое сообщение от ${body.senderName}`);\n          }\n        });\n      },\n      onStompError: frame => {\n        console.error(\"STOMP ошибка:\", frame);\n      }\n    });\n    client.activate();\n    clientRef.current = client;\n    return () => {\n      client.deactivate();\n      setConnected(false);\n    };\n  }, []);\n  useEffect(() => {\n    const fetchUsers = async () => {\n      try {\n        const token = getToken();\n        const res = await fetch(\"/users/all\", {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        if (res.ok) {\n          const data = await res.json();\n          setAllUsers(data.filter(userItem => userItem.id !== user.userId));\n        } else {\n          console.error(\"Ошибка при получении пользователей:\", res.status);\n        }\n      } catch (err) {\n        console.error(\"Ошибка при загрузке пользователей:\", err);\n      }\n    };\n    if (user.userId) {\n      fetchUsers();\n    }\n  }, [user.userId]);\n  const handleSend = e => {\n    e.preventDefault();\n    const client = clientRef.current;\n    if (!message.trim() || !recipientId.trim()) return;\n    if (!client || !client.connected) {\n      alert(\"Подключение ещё не установлено.\");\n      return;\n    }\n    const recipientUser = allUsers.find(u => u.id === recipientId);\n    const recipientName = recipientUser ? recipientUser.username : \"Получатель\";\n    const payload = {\n      senderId: user.userId,\n      recipientId,\n      content: message,\n      senderName: user.username,\n      recipientName: recipientName,\n      timestamp: new Date().toISOString()\n    };\n    client.publish({\n      destination: \"/app/chat\",\n      body: JSON.stringify(payload)\n    });\n    setMessages(prev => [...prev, {\n      sender: \"Я\",\n      text: message,\n      timestamp: new Date().toLocaleString(),\n      senderName: user.username\n    }]);\n    setMessage(\"\");\n  };\n  const handleRecipientChange = e => {\n    const value = e.target.value;\n    recipientIdRef.current = value;\n    setRecipientId(value);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-header\",\n        children: \"\\uD83D\\uDCAC \\u041C\\u0435\\u0441\\u0441\\u0435\\u043D\\u0434\\u0436\\u0435\\u0440\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status\",\n        children: connected ? \"🟢 Подключено\" : \"🔴 Подключение...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: recipientId,\n        onChange: handleRecipientChange,\n        className: \"recipient-input\",\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"-- \\u0412\\u044B\\u0431\\u0435\\u0440\\u0438\\u0442\\u0435 \\u043F\\u043E\\u043B\\u0443\\u0447\\u0430\\u0442\\u0435\\u043B\\u044F --\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 21\n        }, this), allUsers.map(user => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: user.id,\n          children: [user.username, \" (\", user.email, \")\"]\n        }, user.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 25\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"messages\",\n        children: messages.map((msg, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message\",\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: [msg.senderName, \":\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 29\n          }, this), \" \", msg.text, \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n            children: msg.timestamp\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 29\n          }, this)]\n        }, idx, true, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSend,\n        className: \"input-form\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: message,\n          onChange: e => setMessage(e.target.value),\n          placeholder: \"\\u0412\\u0432\\u0435\\u0434\\u0438\\u0442\\u0435 \\u0441\\u043E\\u043E\\u0431\\u0449\\u0435\\u043D\\u0438\\u0435...\",\n          className: \"message-input\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"send-button\",\n          children: \"\\u041E\\u0442\\u043F\\u0440\\u0430\\u0432\\u0438\\u0442\\u044C\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 183,\n    columnNumber: 9\n  }, this);\n}\n_s(Chat, \"PLJrZ1TqlW+Gq4+q01irSUW0or4=\", false, function () {\n  return [useRecoilState, useRecoilState, useRecoilState];\n});\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Client","SockJS","jwtDecode","useRecoilState","loggedInUser","chatActiveContact","chatMessages","jsxDEV","_jsxDEV","Chat","_s","message","setMessage","connected","setConnected","allUsers","setAllUsers","user","setUser","recipientId","setRecipientId","messages","setMessages","clientRef","recipientIdRef","getToken","match","document","cookie","RegExp","fetchMessages","token","res","fetch","userId","headers","Authorization","ok","data","json","map","msg","sender","senderId","text","content","timestamp","senderName","console","error","status","err","alert","window","location","href","decoded","id","name","username","socket","client","webSocketFactory","connectHeaders","reconnectDelay","onConnect","subscribe","body","JSON","parse","otherUserId","current","prevMessages","log","onStompError","frame","activate","deactivate","fetchUsers","filter","userItem","handleSend","e","preventDefault","trim","recipientUser","find","u","recipientName","payload","Date","toISOString","publish","destination","stringify","prev","toLocaleString","handleRecipientChange","value","target","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","email","idx","onSubmit","type","placeholder","required","_c","$RefreshReg$"],"sources":["C:/Users/ludmi/IdeaProjects/Mesenger/src/main/resources/static/src/Chat.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport { Client } from \"@stomp/stompjs\";\r\nimport SockJS from \"sockjs-client\";\r\nimport { jwtDecode } from \"jwt-decode\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { loggedInUser, chatActiveContact, chatMessages } from \"./globalState\";\r\nimport \"./Chat.css\";\r\n\r\nfunction Chat() {\r\n    const [message, setMessage] = useState(\"\");\r\n    const [connected, setConnected] = useState(false);\r\n    const [allUsers, setAllUsers] = useState([]);\r\n\r\n    const [user, setUser] = useRecoilState(loggedInUser);\r\n    const [recipientId, setRecipientId] = useRecoilState(chatActiveContact);\r\n    const [messages, setMessages] = useRecoilState(chatMessages);\r\n\r\n    const clientRef = useRef(null);\r\n    const recipientIdRef = useRef(\"\");\r\n\r\n    const getToken = () => {\r\n        const match = document.cookie.match(new RegExp(\"(^| )token=([^;]+)\"));\r\n        return match ? match[2] : null;\r\n    };\r\n\r\n    const fetchMessages = async (recipientId) => {\r\n        try {\r\n            const token = getToken();\r\n            const res = await fetch(`/messages/${user.userId}/${recipientId}`, {\r\n                headers: { Authorization: `Bearer ${token}` },\r\n            });\r\n            if (res.ok) {\r\n                const data = await res.json();\r\n                setMessages(data.map((msg) => ({\r\n                    sender: msg.senderId === user.userId ? \"Я\" : \"Он\",\r\n                    text: msg.content,\r\n                    timestamp: msg.timestamp,\r\n                    senderName: msg.senderName,\r\n                })));\r\n            } else {\r\n                console.error(\"Ошибка загрузки сообщений:\", res.status);\r\n            }\r\n        } catch (err) {\r\n            console.error(\"Ошибка при загрузке сообщений:\", err);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (recipientId && user.userId) {\r\n            fetchMessages(recipientId);\r\n        }\r\n    }, [recipientId, user.userId]);\r\n\r\n    useEffect(() => {\r\n        const token = getToken();\r\n        if (!token) {\r\n            alert(\"Нет токена. Пожалуйста, войдите снова.\");\r\n            window.location.href = \"/\";\r\n            return;\r\n        }\r\n\r\n        const decoded = jwtDecode(token);\r\n        const id = decoded.userId;\r\n        const name = decoded.username;\r\n\r\n        if (!id) {\r\n            alert(\"Токен не содержит userId.\");\r\n            return;\r\n        }\r\n\r\n        setUser({ userId: id, username: name });\r\n\r\n        const socket = new SockJS(\"http://localhost:8080/ws\");\r\n        const client = new Client({\r\n            webSocketFactory: () => socket,\r\n            connectHeaders: { Authorization: `Bearer ${token}` },\r\n            reconnectDelay: 5000,\r\n            onConnect: () => {\r\n                setConnected(true);\r\n                client.subscribe(`/user/${id}/queue/messages`, (msg) => {\r\n                    const body = JSON.parse(msg.body);\r\n                    const otherUserId = body.senderId;\r\n\r\n                    if (recipientIdRef.current === otherUserId) {\r\n                        setMessages(prevMessages => [\r\n                            ...prevMessages,\r\n                            {\r\n                                sender: body.senderId === id ? \"Я\" : \"Он\",\r\n                                text: body.content,\r\n                                timestamp: body.timestamp,\r\n                                senderName: body.senderName,\r\n                            }\r\n                        ]);\r\n                    } else {\r\n                        console.log(`📩 Новое сообщение от ${body.senderName}`);\r\n                    }\r\n                });\r\n            },\r\n            onStompError: (frame) => {\r\n                console.error(\"STOMP ошибка:\", frame);\r\n            },\r\n        });\r\n\r\n        client.activate();\r\n        clientRef.current = client;\r\n\r\n        return () => {\r\n            client.deactivate();\r\n            setConnected(false);\r\n        };\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const fetchUsers = async () => {\r\n            try {\r\n                const token = getToken();\r\n                const res = await fetch(\"/users/all\", {\r\n                    headers: { Authorization: `Bearer ${token}` },\r\n                });\r\n\r\n                if (res.ok) {\r\n                    const data = await res.json();\r\n                    setAllUsers(data.filter((userItem) => userItem.id !== user.userId));\r\n                } else {\r\n                    console.error(\"Ошибка при получении пользователей:\", res.status);\r\n                }\r\n            } catch (err) {\r\n                console.error(\"Ошибка при загрузке пользователей:\", err);\r\n            }\r\n        };\r\n\r\n        if (user.userId) {\r\n            fetchUsers();\r\n        }\r\n    }, [user.userId]);\r\n\r\n    const handleSend = (e) => {\r\n        e.preventDefault();\r\n        const client = clientRef.current;\r\n        if (!message.trim() || !recipientId.trim()) return;\r\n\r\n        if (!client || !client.connected) {\r\n            alert(\"Подключение ещё не установлено.\");\r\n            return;\r\n        }\r\n\r\n        const recipientUser = allUsers.find((u) => u.id === recipientId);\r\n        const recipientName = recipientUser ? recipientUser.username : \"Получатель\";\r\n\r\n        const payload = {\r\n            senderId: user.userId,\r\n            recipientId,\r\n            content: message,\r\n            senderName: user.username,\r\n            recipientName: recipientName,\r\n            timestamp: new Date().toISOString(),\r\n        };\r\n\r\n        client.publish({\r\n            destination: \"/app/chat\",\r\n            body: JSON.stringify(payload),\r\n        });\r\n\r\n        setMessages((prev) => [\r\n            ...prev,\r\n            {\r\n                sender: \"Я\",\r\n                text: message,\r\n                timestamp: new Date().toLocaleString(),\r\n                senderName: user.username,\r\n            },\r\n        ]);\r\n        setMessage(\"\");\r\n    };\r\n\r\n    const handleRecipientChange = (e) => {\r\n        const value = e.target.value;\r\n        recipientIdRef.current = value;\r\n        setRecipientId(value);\r\n    };\r\n\r\n    return (\r\n        <div className=\"chat-container\">\r\n            <div className=\"chat-box\">\r\n                <div className=\"chat-header\">💬 Мессенджер</div>\r\n                <div className=\"status\">\r\n                    {connected ? \"🟢 Подключено\" : \"🔴 Подключение...\"}\r\n                </div>\r\n                <select\r\n                    value={recipientId}\r\n                    onChange={handleRecipientChange}\r\n                    className=\"recipient-input\"\r\n                >\r\n                    <option value=\"\">-- Выберите получателя --</option>\r\n                    {allUsers.map((user) => (\r\n                        <option key={user.id} value={user.id}>\r\n                            {user.username} ({user.email})\r\n                        </option>\r\n                    ))}\r\n                </select>\r\n                <div className=\"messages\">\r\n                    {messages.map((msg, idx) => (\r\n                        <div key={idx} className=\"message\">\r\n                            <strong>{msg.senderName}:</strong> {msg.text}{\" \"}\r\n                            <span>{msg.timestamp}</span>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n                <form onSubmit={handleSend} className=\"input-form\">\r\n                    <input\r\n                        type=\"text\"\r\n                        value={message}\r\n                        onChange={(e) => setMessage(e.target.value)}\r\n                        placeholder=\"Введите сообщение...\"\r\n                        className=\"message-input\"\r\n                        required\r\n                    />\r\n                    <button type=\"submit\" className=\"send-button\">\r\n                        Отправить\r\n                    </button>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Chat;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}